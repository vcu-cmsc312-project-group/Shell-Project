#!/bin/python2

from __future__ import with_statement
from __future__ import absolute_import
import os
import sys
import io
import subprocess
from io import open

## Still Left to do:
## 2. Check assignment but it appears to deal with executing programs
## Make sure it works on Jasmine 

pwd = os.getcwdu()
os.environ["SHELL"] = sys.argv[0]

def prompt():
    return '[' + os.getlogin() + ' ' + pwd + ']$ '

def builtin_clear():
    os.system('cls' if os.name == 'nt' else 'clear')

def builtin_chdir(path):
    global pwd
    if path == None:
        print pwd
    else:
        try:
            os.chdir(path)
            pwd = os.getcwdu()
            os.environ["PWD"] = pwd
        except OSError, e:
            print e

def builtin_dir(path):
    try:
        contents = os.listdir(path or pwd)
        contents.sort()
        for f in contents:
            print f
    except OSError, e:
        print e

def builtin_echo(txt):
    if txt is not None:
        print txt

def builtin_pause():
    sys.stdin.read(1)

def builtin_pwd():
    print pwd

def builtin_help():
    file = open("help.txt")
    print file.read()

def builtin_environ():
    for key in os.environ.keys():
        print key + ": " + os.environ.get(key)

def builtin_proc(args):
    subprocenv = os.environ
    subprocenv.update({"PARENT": os.environ["SHELL"]})
    return subprocess.call(args, env = subprocenv)
        
def builtin_file(cmdargs):
    try:
        builtin_proc(cmdargs)
    except:
        with open(cmdargs[0]) as f:
            for line in f:
                line = line.strip()
                builtin_commandcall(line)

def builtin_commandcall(line):
    line = line.split(' ')
    args = ' '.join(line[1:]) if len(line) > 1 else None
    if   line[0] in ("quit", "exit"):
        sys.exit()
    elif line[0] in ("dir", "ls"):
        builtin_dir(args)
    elif line[0] in ("cd", "chdir"):
        builtin_chdir(args)
    elif line[0] in ("clr", "cls", "clear"):
        builtin_clear()
    elif line[0] == "pause":
        builtin_pause()
    elif line[0] == "echo":
        builtin_echo(args)
    elif line[0] == "help":
        builtin_help()
    elif line[0] == "environ":
        builtin_environ()
    elif line[0] in ("pwd", "cwd"):
        builtin_pwd()
    else:
        try:
            builtin_file(line)
        except:
            print "Error: " + line[0] + " is not a command, shell script, or executable."

if len(sys.argv) > 1:
    builtin_commandcall(sys.argv[1])

while(True):
    cmd = raw_input(prompt())
    builtin_commandcall(cmd)
